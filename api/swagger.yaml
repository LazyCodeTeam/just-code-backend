basePath: /
consumes:
    - application/json
definitions:
    Error:
        description: ErrorDto
        properties:
            args:
                additionalProperties: {}
                description: Additional arguments
                example:
                    arg1: value1
                    arg2: value2
                type: object
                x-go-name: Args
            code:
                description: Error code - for programmatic error handling
                example: internal_server_error
                type: string
                x-go-name: Code
            message:
                description: Error message - human readable
                example: Internal server error
                type: string
                x-go-name: Message
        required:
            - code
            - message
        type: object
        x-go-package: github.com/LazyCodeTeam/just-code-backend/internal/api/dto
    Profile:
        description: ProfileDto
        properties:
            avatar_url:
                description: User avatar url
                example: https://example.com/avatar.png
                type: string
                x-go-name: AvatarUrl
            first_name:
                description: User first name
                example: John
                type: string
                x-go-name: FirstName
            last_name:
                description: User last name
                example: Doe
                type: string
                x-go-name: LastName
            nickname:
                description: User nickname
                example: johndoe
                type: string
                x-go-name: Nickname
        required:
            - nickname
        type: object
        x-go-package: github.com/LazyCodeTeam/just-code-backend/internal/api/dto
info:
    contact:
        email: mateuszledwon@duck.com
        name: Mateusz Ledwo≈Ñ
        url: https://github.com/Axot017
    description: Documentation of JustCode API
    title: JustCode API
    version: 0.0.1
paths:
    /api/health:
        get:
            description: This will check if the service is up and running.
            operationId: health
            responses:
                "200":
                    $ref: '#/responses/emptyResponse'
                "500":
                    $ref: '#/responses/errorResponse'
            summary: Health check
    /api/v1/profile/current:
        get:
            operationId: profileGetCurrent
            responses:
                "200":
                    $ref: '#/responses/profileGetCurrentResponse'
                "401":
                    $ref: '#/responses/errorResponse'
                "500":
                    $ref: '#/responses/errorResponse'
            summary: Get current profile
            tags:
                - profile
        put:
            operationId: currentProfile
            responses:
                "200":
                    $ref: '#/responses/emptyResponse'
                "500":
                    $ref: '#/responses/errorResponse'
            summary: Get current profile
            tags:
                - profile
produces:
    - application/json
responses:
    emptyResponse:
        description: Empty response
    errorResponse:
        description: ""
        schema:
            $ref: '#/definitions/Error'
    profileGetCurrentResponse:
        description: ""
        schema:
            $ref: '#/definitions/Profile'
security:
    - bearer_auth: []
securityDefinitions:
    bearer_auth:
        in: header
        name: Authorization
        type: apiKey
swagger: "2.0"
