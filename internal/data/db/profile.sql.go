// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (
  id, name, first_name, last_name
) VALUES (
  $1, $2, $3, $4
)
ON CONFLICT (id) DO UPDATE
SET
  name = $2,
  first_name = $3,
  last_name = $4,
  updated_at = NOW()
RETURNING id, name, avatar_url, first_name, last_name, updated_at, created_at
`

type CreateProfileParams struct {
	ID        string
	Name      string
	FirstName pgtype.Text
	LastName  pgtype.Text
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.ID,
		arg.Name,
		arg.FirstName,
		arg.LastName,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarUrl,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getProfileById = `-- name: GetProfileById :one
SELECT id, name, avatar_url, first_name, last_name, updated_at, created_at FROM profile
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetProfileById(ctx context.Context, id string) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileById, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarUrl,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateProfileAvatar = `-- name: UpdateProfileAvatar :exec
UPDATE profile SET
  avatar_url = $2
WHERE id = $1
`

type UpdateProfileAvatarParams struct {
	ID        string
	AvatarUrl pgtype.Text
}

func (q *Queries) UpdateProfileAvatar(ctx context.Context, arg UpdateProfileAvatarParams) error {
	_, err := q.db.Exec(ctx, updateProfileAvatar, arg.ID, arg.AvatarUrl)
	return err
}
