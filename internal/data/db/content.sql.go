// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: content.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllTechnologies = `-- name: GetAllTechnologies :many
SELECT technology.id, technology.title, technology.description, technology.image_url, technology.position, technology.updated_at, technology.created_at, 
section.id as section_id, 
section.position, 
section.title as section_title, 
section.description as section_description, 
section.image_url as section_image_url
FROM technology
LEFT JOIN section ON section.technology_id = technology.id
ORDER BY technology.position ASC, section.position ASC
`

type GetAllTechnologiesRow struct {
	ID                 pgtype.UUID
	Title              string
	Description        pgtype.Text
	ImageUrl           pgtype.Text
	Position           int32
	UpdatedAt          pgtype.Timestamptz
	CreatedAt          pgtype.Timestamptz
	SectionID          pgtype.UUID
	Position_2         pgtype.Int4
	SectionTitle       pgtype.Text
	SectionDescription pgtype.Text
	SectionImageUrl    pgtype.Text
}

func (q *Queries) GetAllTechnologies(ctx context.Context) ([]GetAllTechnologiesRow, error) {
	rows, err := q.db.Query(ctx, getAllTechnologies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTechnologiesRow
	for rows.Next() {
		var i GetAllTechnologiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.Position,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.SectionID,
			&i.Position_2,
			&i.SectionTitle,
			&i.SectionDescription,
			&i.SectionImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
